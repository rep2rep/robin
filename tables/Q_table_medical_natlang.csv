medical,natlang
error_allowed,0
answer_type,N
instrumental_tokens,"probability : {type := N;
                                    occurrences := 1},
                     if : {type := CONJ;
                           occurrences := 1},
                     not : {type := ADV;
                            occurrences := 1}"
instrumental_types,""
instrumental_patterns,"$class_ratio : {holes := [ratio => 1. PP => 1. VP => 1];
                                       tokens := [];
                                       type := S;
                                       occurrences := 3;
                                       token_registration := 1},
                       $conditional_probability : {holes := [S => 2.  ratio => 1];
                                                    tokens := [probability. if];
                                                    type := statement;
                                                    occurrences := 1;
                                                    token_registration := 1}"
instrumental_laws,"$Bayes'_theorem,
                   $law_of_total_probability,
                   $non_negative_probability,
                   $unit_measure,
                   $sigma_additivity"
instrumental_tactics,"transform : {patterns := 0;
                                   laws := 0;
                                   uses := 1;
                                   inference_type := transformation}"
relevant_tokens,"4 : {type := number;
                      occurrences := 1},
                 \% : {type := number -> ratio;
                       occurrences := 3},
                 of : {type := P;
                       occurrences := 3},
                 the : {type := DET;
                       occurrences := 8},
                 population : {type := N;
                               occurrences := 1},
                 has : {type := AUX;
                        occurrences := 1},
                 a : {type := DET;
                      occurrences := 2},
                 disease : {type := N;
                            occurrences := 4},
                 D : {type := N;
                      occurrences := 1},
                 for : {type := P;
                        occurrences := 1},
                 those : {type := PRO;
                          occurrences := 2},
                 who : {type := RPRO;
                        occurrences := 2},
                 have : {type := AUX;
                         occurrences := 3},
                 test : {type := N;
                         occurrences := 2},
                 T : {type := N;
                      occurrences := 2},
                 is : {type := V;
                       occurrences := 3},
                 accurate : {type := ADJ;
                             occurrences := 2},
                 95 : {type := number;
                       occurrences := 1},
                 time : {type := N;
                         occurrences := 2},
                 do : {type := V;
                       occurrences := 1},
                 90 : {type := number;
                       occurrences := 1},
                 you : {type := PRO;
                        occurrences := 2},
                 take : {type := V;
                         occurrences := 1},
                 and : {type := CONJ;
                        occurrences := 1},
                 it : {type := PRO;
                       occurrences := 1},
                 comes : {type := V;
                          occurrences := 1},
                 out : {type := ADV;
                        occurrences := 1},
                 positive : {type := ADJ;
                             occurrences := 1},
                 what : {type := PRO;
                         occurrences := 1},
                 ? : {type := punctuation;
                      occurrences := 1},
                 $comma : {type := punctuation;
                           occurrences := 2},
                 $fullstop : {type := punctuation;
                              occurrences := 3}"
relevant_patterns,"NPfromRatio : {type := NP;
                                  holes := [ratio => 1];
                                  occurrences := 3;
                                  token_registration := 1},
                   NPfromN : {type := NP;
                              holes := [N => 1];
                              occurrences := ;
                              token_registration := 1},
                   VfromAux : {type := V;
                               holes := [AUX => 1];
                               occurrences := 3;
                               token_registration := 1},
                   NPfromPRO : {type := NP;
                                holes := [PRO => 1];
                                occurrences := 6;
                                token_registration := 1},
                   NPfromNPandRPROandVP : {type := NP;
                                            holes := [NP => 1. RPRO => 1. VP => 1];
                                            occurrences := 2;
                                            token_registration := 1},
                   SfromNPandVP : {type := S;
                                   holes := [NP => 1. VP => 1];
                                   occurrences := 5;
                                   tokens := []},
                   NPfromDETandN : {type := NP;
                                    holes := [DET => 1. N => 1];
                                    occurrences := 10;
                                    tokens := []},
                   NPfromADJandNP : {type := NP;
                                     holes := [ADJ => 1. NP => 1]; recursive
                                     occurrences := 3;
                                     tokens := []},
                   NPfromNPandPP : {type := NP;
                                    holes := [NP => 1. PP => 1]; recursive;
                                    occurrences := 4;
                                    tokens := []},
                   PPfromPandNP : {type := PP;
                                   holes := [P => 1. NP => 1];
                                   occurrences := 4;
                                   tokens := []},
                   VPfromV : {type := VP;
                               holes := [V => 1];
                               occurrences := 0;
                               tokens := []},
                   VPfromVandAP : {type := VP;
                                   holes := [V => 1. AP => 1];
                                   occurrences := 2;
                                   tokens := []},
                   VPfromAUXandVP : {type := VP;
                                     holes := [AUX => 1. VP => 1]; recursive;
                                     occurrences := 0;
                                     tokens := []},
                   VPfromADVandVP : {type := VP;
                                     holes := [ADV => 1. VP => 1]; recursive;
                                     occurrences := 1;
                                     tokens := []},
                   VPfromVandNP : {type := VP;
                                    holes := [V => 1. NP => 1];
                                    occurrences := 4;
                                    tokens := []},
                   VPfromVPandPP : {type := VP;
                                    holes := [VP => 1. PP => 1]; recursive;
                                    occurrences := 0;
                                    tokens := []},
                   APfromADJandAP : {type := AP;
                                     holes := [ADJ => 1. AP => 1];
                                     occurrences := 2;
                                     tokens := []},
                   APfromAPandPP : {type := AP;
                                    holes := [AP => 1. PP => 1];
                                    occurrences := 0;
                                    tokens := []},
                   APfromADVandAP : {type := AP;
                                     holes := [ADV => 1. AP => 1];
                                     occurrences := 2;
                                     tokens := []},
                   APfromADJ : {type := AP;
                                holes := [ADJ => 1];
                                occurrences := 3;
                                tokens := []},
                   $CONJS : {type := S;
                            holes := [CONJ => 1. S => 2];
                            occurrences := 1;
                            tokens := []},
                   $CONJN : {type := NP;
                            holes := [CONJ => 1. NP => 2];
                            occurrences := 0;
                            tokens := []},
                   $CONJV : {type := VP;
                            holes := [CONJ => 1. VP => 2];
                            occurrences := 1;
                            tokens := []}"
noise_tokens, ""
