bayes,
mode,"sentential"
types,"real,event,formula,proof"
tokens,"\Pr : {type := event -> real;
                      tokens := [(. )];
                      token_registration := 2},
         \Pr : {type := event * event -> real;
                tokens := [\mid. (. )];
                token_registration := 2},
         = : {type := real * real -> formula;
              token_registration := 2},
         = : {type := event * event -> formula;
              token_registration := 2},
         \bar : {type := event -> event;
                 token_registration := 2},
         \cap : {type := event * event -> event;
                 token_registration := 2},
         \cup : {type := event * event -> event;
                 token_registration := 2},
         \mid : {type := delimiter},
         \cdot : {type := real * real -> real;
                  token_registration := 2},
         + : {type := real * real -> real;
              token_registration := 2},
         - : {type := real * real -> real;
              token_registration := 2},
         \frac : {type := real * real -> real;
                  token_registration := 2},
         \div : {type := real * real -> real;
                  token_registration := 2},
         \setminus : {type := event},
         \Omega : {type := event},
         \emptyset : {type := event},
          0 : {type := real},
          1 : {type := real},
         assume : {type := V;
                   occurrences := 1},
         calculate : {type := V;
                      occurrences := 1},
        ( : {type := delimiter},
        ) : {type := delimiter},
        \colon : {type := delimiter}"
token_imports,"base_10_real_numerals, latin_alphabet"
patterns,"conditional_Pr : {holes:=[event=>2. real=>1]; tokens:=[\Pr. \mid. =]}, simple_Pr : {holes:=[event=>1. real=>1]; tokens:=[\Pr. =]}, equality_chain : {holes:=[real=>#t]; tokens:=[=]}, joint_Pr : {holes:=[event=>2. real=>1]; tokens:=[\cap. =. \Pr]}, independent_events"
grammatical_complexity,type-2
rigorous,TRUE
laws,"Bayes'_theorem, law_of_total_probability, non_negative_probability, unit_measure, sigma_additivity, +inverse, add-def, mult-def, *inverse"
law_imports,"real_number_arithmetic, finite_set_algebra"
tactics,"rewrite, lemma, calc"
inferential_complexity,2
physical_dimension_use,"X:{grammatical;inferential}, Y:{inferential}, colour:{}"
