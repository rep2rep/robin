birds,expnatlang
mode,"sentential"
error_allowed,0
answer_type,ratio
instrumental_tokens, "probability : {type := N;
                                     occurrences := 1},
                      and : {type := CONJ;
                             occurrences := 1},
                      if : {type := CONJ;
                            occurrences := 1},
                      not : {type := ADV;
                             occurrences := 1}"
instrumental_types, "ratio,
                     class"
instrumental_patterns, "$class_ratio : {holes := [DET => 1. N => 1. PP => 1. NP => 1];
                                        tokens := [are];
                                        type := statement;
                                        occurrences := 3;
                                        token_registration := 2},
                        $probability_of_conjunction : {holes := [NP => 3];
                                                       tokens := [probability. and];
                                                       type := statement;
                                                       occurrences := 1;
                                                       token_registration := 2},
                        $conditional_probability : {holes := [PP => 1. NP => 3];
                                                    tokens := [probability. if];
                                                    type := statement;
                                                    occurrences := 1;
                                                    token_registration := 2}"
relevant_patterns, "ClassIsN : {type := N;
                                holes := [class => 1];
                                occurrences := 2;
                                tokens := []},
                    RatioIsN : {type := N;
                                holes := [ratio => 1];
                                occurrences := 2;
                                tokens := []},
                    SfromNPandVP : {type := S;
                                    holes := [NP => 1. VP => 1];
                                    occurrences := 6;
                                    tokens := []},
                    NPfromN : {type := NP;
                               holes := [N => 1];
                               occurrences := 12;
                               tokens := []},
                    NPfromDETandN : {type := NP;
                                     holes := [DET => 1. N => 1];
                                     occurrences := 8;
                                     tokens := []},
                    NPfromADJandNP : {type := NP;
                                      holes := [ADJ => 1. NP => 1]; recursive;
                                      occurrences := 1;
                                      tokens := []},
                    NPfromNPandPP : {type := NP;
                                     holes := [NP => 1. PP => 1]; recursive;
                                     occurrences := 5;
                                     tokens := []},
                    PPfromPandNP : {type := PP;
                                    holes := [P => 1. NP => 1];
                                    occurrences := 5;
                                    tokens := []},
                    VPfromV : {type := VP;
                                holes := [V => 1];
                                occurrences := 1;
                                tokens := []},
                    VPfromAUXandVP : {type := VP;
                                      holes := [AUX => 1. VP => 1]; recursive;
                                      occurrences := 2;
                                      tokens := []},
                    VPfromADVPandVP : {type := VP;
                                       holes := [ADV => 1. VP => 1]; recursive;
                                       occurrences := 0;
                                       tokens := []},
                    VPfromVandNP : {type := VP;
                                     holes := [V => 1. NP => 1];
                                     occurrences := 1;
                                     tokens := []},
                    VPfromVPandPP : {type := VP;
                                     holes := [VP => 1. PP => 1]; recursive;
                                     occurrences := 0;
                                     tokens := []},
                    $CONJS : {type := S;
                             holes := [CONJ => 1. S => 2];
                             occurrences := 1;
                             tokens := []},
                    $CONJN : {type := NP;
                             holes := [CONJ => 1. NP => 2];
                             occurrences := 0;
                             tokens := []},
                    $CONJV : {type := VP;
                             holes := [CONJ => 1. VP => 2];
                             occurrences := 0;
                             tokens := []}"
instrumental_laws, "$Bayes'_theorem,
                    $law_of_total_probability,
                    $non_negative_probability,
                    $unit_measure,
                    $sigma_additivity"
instrumental_tactics,""
relevant_tokens, "one : {type := DET; occurrences := 1},
                  quarter : {type := N; occurrences := 1},
                  of : {type := P; occurrences := 2},
                  all : {type := DET; occurrences := 3},
                  animals : {type := N; occurrences := 2},
                  are : {type := V; occurrences := 2},
                  birds : {type := N; occurrences := 4},
                  two : {type := DET; occurrences := 1},
                  thirds : {type := N; occurrences := 1},
                  can : {type := AUX; occurrences := 1},
                  fly : {type := V; occurrences := 2},
                  half : {type := N; occurrences := 1},
                  flying : {type := ADJ; occurrences := 1},
                  X : {type := N; occurrences := 1},
                  animal : {type := N; occurrences := 1},
                  it : {type := N; occurrences := 2},
                  cannot : {type := AUX; occurrences := 1},
                  times : {type := quantity * quantity -> quantity; occurrences := 0},
                  divided_by : {type := quantity * quantity -> quantity; occurrences := 0},
                  plus : {type := quantity * quantity -> quantity; occurrences := 0},
                  minus : {type := quantity * quantity -> quantity; occurrences := 0},
                  equals : {type := quantity * quantity -> statement; occurrences := 0},
                  union : {type := class * class -> class; occurrences := 0},
                  intersection : {type := class * class -> class; occurrences := 0},
                  zero : {type := quantity; occurrences := 0}"
noise_tokens,"have : {type := V; occurrences := 0},
              feathers : {type := class; occurrences := 0},
              beast : {type := class; occurrences := 0},
              animate : {type := class; occurrences := 0},
              creature : {type := class; occurrences := 0},
              wing : {type := class; occurrences := 0},
              aviate : {type := (class -> statement); occurrences := 0},
              flock : {type := class; occurrences := 0},
              fowl : {type := class; occurrences := 0},
              dame : {type := class; occurrences := 0},
              carnal : {type := class -> class; occurrences := 0},
              being : {type := class; occurrences := 0},
              fauna : {type := class; occurrences := 0}"
